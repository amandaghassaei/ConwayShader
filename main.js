(()=>{var e={607:(e,t,r)=>{"use strict";var n=r(561),i=r(645),a=r(539),o=r(950),s=document.getElementById("glcanvas"),u=new n.GPGPU(null,s),l=u.initProgram("gol",i,[{name:"u_state",value:0,dataType:"INT"},{name:"u_pxSize",value:[1/s.clientWidth,1/s.clientHeight],dataType:"FLOAT"}]),f=u.initProgram("render",a,[{name:"u_state",value:0,dataType:"INT"}]),h=u.initProgram("interaction",o,[{name:"u_noiseLookup",value:0,dataType:"INT"}]);function c(e,t){void 0===t&&(t=.1);for(var r=new Uint8Array(e),n=0,i=r.length;n<i;n++)r[n]=Math.random()<t?255:0;return r}var d=u.initDataLayer("state",{width:s.clientWidth,height:s.clientHeight,type:"uint8",numChannels:1,data:c(s.clientWidth*s.clientHeight)},!0,2);function _(){var e=s.clientWidth,t=s.clientHeight;d.resize(e,t,c(e*t)),l.setUniform("u_pxSize",[1/e,1/t],"FLOAT"),u.onResize(s)}_(),window.addEventListener("resize",_);var g=u.initDataLayer("noise",{width:20,height:20,type:"uint8",numChannels:1,data:c(400,.5)});function m(e){e.preventDefault();var t="scale(1)";document.body.style.webkitTransform=t,document.body.style.msTransform=t,document.body.style.transform=t}s.addEventListener("mousemove",(function(e){u.stepCircle(h,[e.clientX,e.clientY],10,[g],d)})),s.addEventListener("touchmove",(function(e){e.preventDefault();for(var t=0;t<e.touches.length;t++){var r=e.touches[t];u.stepCircle(h,[r.pageX,r.pageY],10,[g],d)}})),document.addEventListener("gesturestart",m),document.addEventListener("gesturechange",m),document.addEventListener("gestureend",m),window.requestAnimationFrame((function e(){u.step(l,[d],d),u.step(f,[d]),window.requestAnimationFrame(e)}))},249:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataLayer=void 0;var r=function(){function e(e,t,r,n,i,a){if(this.bufferIndex=0,this.buffers=[],this.name=e,this.gl=t,this.errorCallback=n,i<0||i%1!=0)throw new Error("Invalid numBuffers: "+i+" for DataLayer "+this.name+", must be positive integer.");this.numBuffers=i,this.width=r.width,this.height=r.height,this.glInternalFormat=r.glInternalFormat,this.glFormat=r.glFormat,this.glType=r.glType,this.writable=a,this.initBuffers(r.data)}return e.prototype.initBuffers=function(e){for(var t=this,r=t.numBuffers,n=t.gl,i=t.width,a=t.height,o=t.glInternalFormat,s=t.glFormat,u=t.glType,l=t.writable,f=t.errorCallback,h=0;h<r;h++){var c=n.createTexture();if(!c)return void f("Could not init texture for DataLayer "+this.name+": "+n.getError()+".");n.bindTexture(n.TEXTURE_2D,c),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE);var d=n.NEAREST;n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,d),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,d),n.texImage2D(n.TEXTURE_2D,0,o,i,a,0,s,u,e||null);var _={texture:c};if(l){var g=n.createFramebuffer();if(!g)return void f("Could not init framebuffer for DataLayer "+this.name+": "+n.getError()+".");n.bindFramebuffer(n.FRAMEBUFFER,g),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,c,0);var m=n.checkFramebufferStatus(n.FRAMEBUFFER);m!=n.FRAMEBUFFER_COMPLETE&&f("Invalid status for framebuffer for DataLayer "+this.name+": "+m+"."),_.framebuffer=g}this.buffers.push(_)}},e.prototype.getCurrentStateTexture=function(){return this.buffers[this.bufferIndex].texture},e.prototype.getLastStateTexture=function(){if(1===this.numBuffers)throw new Error("Calling getLastState on DataLayer "+this.name+" with 1 buffer, no last state available.");return this.buffers[this.bufferIndex].texture},e.prototype.setAsRenderTarget=function(){var e=this.gl;this.bufferIndex=++this.bufferIndex%this.numBuffers;var t=this.buffers[this.bufferIndex].framebuffer;if(!t)throw new Error("DataLayer "+this.name+" is not writable.");e.bindFramebuffer(e.FRAMEBUFFER,t)},e.prototype.resize=function(e,t,r){this.destroyBuffers(),this.width=e,this.height=t,this.initBuffers(r)},e.prototype.destroyBuffers=function(){var e=this.gl,t=this.buffers;t.forEach((function(t){var r=t.framebuffer,n=t.texture;e.deleteTexture(n),r&&e.deleteFramebuffer(r),delete t.texture,delete t.framebuffer})),t.length=0},e.prototype.destroy=function(){this.destroyBuffers(),delete this.gl},e}();t.DataLayer=r},576:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPGPU=void 0;for(var n=r(416),i=r(249),a=r(389),o=r(989),s=new Float32Array([-1,-1,1,-1,-1,1,1,1]),u=new Float32Array([-1,-1,1,-1,1,1,-1,1]),l=[0,0],f=0;f<=20;f++)l.push(Math.cos(2*Math.PI*f/20),Math.sin(2*Math.PI*f/20));var h=new Float32Array(l),c=function(){function e(e,t,r){void 0===r&&(r=function(e){throw new Error(e)}),this.extensions={},this.errorState=!1,this.shaders=[];var i=this;if(this.errorCallback=function(e){i.errorState||(i.errorState=!0,r&&r(e))},e||null!==(e=t.getContext("webgl2",{antialias:!1})||t.getContext("webgl",{antialias:!1}))){this.isWebGL2=!!e.HALF_FLOAT,this.isWebGL2?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=e,this.isWebGL2?this.loadExtension("EXT_color_buffer_float"):this.loadExtension("OES_texture_half_float"),this.linearFilterEnabled=this.loadExtension("OES_texture_half_float_linear",!0),e.disable(e.DEPTH_TEST),e.pixelStorei(e.UNPACK_ALIGNMENT,1);var a=o.compileShader(e,this.errorCallback,n.default,e.VERTEX_SHADER);if(a){this.defaultVertexShader=a,this.quadPositionsBuffer=this.initVertexBuffer(s),this.boundaryPositionsBuffer=this.initVertexBuffer(u),this.circlePositionsBuffer=this.initVertexBuffer(h),e.bindBuffer(e.ARRAY_BUFFER,null),this.onResize(t);var l=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);console.log(l+" textures max.")}else this.errorCallback("Unable to initialize fullscreen quad vertex shader.")}else this.errorCallback("Unable to initialize WebGL context.")}return e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),n;t("Unable to allocate gl buffer.")},e.prototype.loadExtension=function(e,t){void 0===t&&(t=!1);var r,n=this,i=n.extensions,a=n.gl,o=n.errorCallback;try{r=a.getExtension(e)}catch(e){}return r?(i[e]=r,console.log("Loaded extension: "+e+".")):console.warn("Unsupported "+(t?"optional ":"")+"extension: "+e+"."),r||t||o("Required extension unsupported by this device / browser: "+e+"."),!!r},e.prototype.initProgram=function(e,t,r){var n=this.gl,i=this.errorCallback;return this.defaultVertexShader,new a.GPUProgram(e,n,i,this.defaultVertexShader,t,r)},e.prototype.glTextureParameters=function(e,t,r){var n,i,a,o,s=this,u=s.gl,l=s.isWebGL2,f=s.extensions;if(l){switch(o=e,3===e&&r&&(o=4),o){case 1:i=u.RED;break;case 2:i=u.RG;break;case 3:i=u.RGB;break;case 4:i=u.RGBA}switch(t){case"float16":switch(n=u.HALF_FLOAT,o){case 1:a=u.R16F;break;case 2:a=u.RG16F;break;case 3:a=u.RGB16F;break;case 4:a=u.RGBA16F}break;case"uint8":switch(n=u.UNSIGNED_BYTE,o){case 1:a=u.R8;break;case 2:a=u.RG8;break;case 3:a=u.RGB8;break;case 4:a=u.RGBA8}}}else{switch(e){case 1:case 2:case 3:i=u.RGB,a=u.RGB,o=3;break;case 4:i=u.RGBA,a=u.RGBA,o=4}switch(t){case"float16":n=f.OES_texture_half_float.HALF_FLOAT_OES;break;case"uint8":n=u.UNSIGNED_BYTE}}if(void 0===n||void 0===i||void 0===a)throw new Error("Invalid type: "+t+" or numChannels "+e+".");if(void 0===o||e<1||e>4)throw new Error("Invalid numChannels: "+e+".");return{glFormat:i,glInternalFormat:a,glType:n,glNumChannels:o}},e.prototype.initDataLayer=function(e,t,r,n){void 0===r&&(r=!1),void 0===n&&(n=1);var a=this.gl,o=this.errorCallback,s=t.data,u=t.width,l=t.height,f=t.type,h=t.numChannels;if(s&&s.length!==u*l*h)throw new Error("Invalid data array of size "+s.length+" for DataLayer "+e+" of dimensions "+u+" x "+l+" x "+h+".");var c=this.glTextureParameters(h,f,r),d=c.glFormat,_=c.glInternalFormat,g=c.glNumChannels,m=c.glType,v=s;if(s&&h!==g){var p=u*l,T=void 0;switch(f){case"uint8":T=new Uint8Array(u*l*g);break;default:throw new Error("Error initing "+e+".  Unsupported type "+f+" for GPGPU.initDataLayer.")}for(var F=0;F<p;F++)for(var b=0;b<h;b++)T[g*F+b]=s[F*h+b];v=T}return new i.DataLayer(e,a,{width:u,height:l,glInternalFormat:_,glFormat:d,glType:m,data:v},o,n,r)},e.prototype.onResize=function(e){var t=this.gl,r=e.clientWidth,n=e.clientHeight;t.viewport(0,0,r,n),e.width=r,e.height=n,this.width=r,this.height=n},e.prototype._step=function(e,t,r){var n=this.gl;if(e.program){n.useProgram(e.program);for(var i=0;i<t.length;i++)n.activeTexture(n.TEXTURE0+i),n.bindTexture(n.TEXTURE_2D,t[i].getCurrentStateTexture());if(r){if(1===r.numBuffers&&t.indexOf(r)>-1)throw new Error("\n\t\t\t\t\tCannot use same buffer for input and output of a program.\n\t\t\t\t\tTry increasing the number of buffers in your output layer to at least 2 so you\n\t\t\t\t\tcan render to nextState using currentState as an input.");r.setAsRenderTarget()}else n.bindFramebuffer(n.FRAMEBUFFER,null);var a=n.getAttribLocation(e.program,"aPosition");n.vertexAttribPointer(a,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(a)}},e.prototype.step=function(e,t,r){void 0===t&&(t=[]);var n=this,i=n.gl,a=n.errorState,o=n.quadPositionsBuffer;a||(e.setUniform("u_scale",[1,1],"FLOAT"),e.setUniform("u_translation",[0,0],"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,o),this._step(e,t,r),i.drawArrays(i.TRIANGLE_STRIP,0,4))},e.prototype.stepBoundary=function(e,t,r){void 0===t&&(t=[]);var n=this,i=n.gl,a=n.errorState,o=n.boundaryPositionsBuffer,s=n.width,u=n.height;if(!a){var l=[1/s,1/u];e.setUniform("u_scale",[1-l[0],1-l[1]],"FLOAT"),e.setUniform("u_translation",l,"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,o),this._step(e,t,r),i.drawArrays(i.LINE_LOOP,0,4)}},e.prototype.stepNonBoundary=function(e,t,r){void 0===t&&(t=[]);var n=this,i=n.gl,a=n.errorState,o=n.quadPositionsBuffer,s=n.width,u=n.height;if(!a){var l=[1/s,1/u];e.setUniform("u_scale",[1-2*l[0],1-2*l[1]],"FLOAT"),e.setUniform("u_translation",l,"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,o),this._step(e,t,r),i.drawArrays(i.TRIANGLE_STRIP,0,4)}},e.prototype.stepCircle=function(e,t,r,n,i){void 0===n&&(n=[]);var a=this,o=a.gl,s=a.errorState,u=a.circlePositionsBuffer,l=a.width,f=a.height;s||(e.setUniform("u_scale",[r/l,r/f],"FLOAT"),e.setUniform("u_translation",[2*t[0]/l-1,-2*t[1]/f+1],"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,u),this._step(e,n,i),o.drawArrays(o.TRIANGLE_FAN,0,22))},e.prototype.reset=function(){},e}();t.GPGPU=c},389:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPUProgram=void 0;var n=r(647),i=r(989),a=function(){function e(e,t,r,n,a,o){var s=this;this.uniforms={},this.shaders=[],this.name=e,this.gl=t,this.errorCallback=r;var u=t.createProgram();if(u){var l=i.compileShader(t,r,a,t.FRAGMENT_SHADER);l?(this.shaders.push(l),t.attachShader(u,n),t.attachShader(u,l),t.linkProgram(u),t.getProgramParameter(u,t.LINK_STATUS)?(this.program=u,null==o||o.forEach((function(e){var t=e.name,r=e.value,n=e.dataType;s.setUniform(t,r,n)}))):r("Program "+e+" failed to link: "+t.getProgramInfoLog(u))):r("Unable to compile fragment shader for program "+e+".")}else r("Unable to init gl program: "+e+".")}return e.prototype.uniformTypeForValue=function(e,t){if(t===n.FLOAT_TYPE){if(!isNaN(e)||1===e.length)return n.FLOAT_1D_UNIFORM;if(2===e.length)return n.FLOAT_2D_UNIFORM;if(3===e.length)return n.FLOAT_3D_UNIFORM;if(4===e.length)return n.FLOAT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}if(t===n.INT_TYPE){if(!isNaN(e)||1===e.length)return n.INT_1D_UNIFORM;if(2===e.length)return n.INT_2D_UNIFORM;if(3===e.length)return n.INT_3D_UNIFORM;if(4===e.length)return n.INT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}throw new Error("Invalid uniform data type: "+t)},e.prototype.setUniform=function(e,t,r){var i=this,a=i.gl,o=i.errorCallback,s=i.program,u=i.uniforms;if(s){a.useProgram(s);var l=this.uniformTypeForValue(t,r);if(!u[e]){var f=a.getUniformLocation(s,e);if(!f)return void o("Could not init uniform "+e+".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type "+l+".\nError code: "+a.getError()+".");u[e]={location:f,type:l}}var h=u[e];if(h.type!=l)throw new Error("Uniform "+e+" cannot change from type "+h.type+" to type "+l+".");var c=h.location;switch(l){case n.FLOAT_1D_UNIFORM:a.uniform1f(c,t);break;case n.FLOAT_2D_UNIFORM:a.uniform2fv(c,t);break;case n.FLOAT_3D_UNIFORM:a.uniform3fv(c,t);break;case n.FLOAT_4D_UNIFORM:a.uniform4fv(c,t);break;case n.INT_1D_UNIFORM:a.uniform1i(c,t);break;case n.INT_2D_UNIFORM:a.uniform2iv(c,t);break;case n.INT_3D_UNIFORM:a.uniform3iv(c,t);break;case n.INT_4D_UNIFORM:a.uniform4iv(c,t);break;default:throw new Error("Unknown uniform type: "+l+".")}}else o("Program not inited.")},e.prototype.destroy=function(){var e=this,t=e.gl,r=e.program,n=e.shaders;r&&t.deleteProgram(r);for(var i=0;i<n.length;i++)t.deleteShader(n[i]);n.length=0,delete this.gl,delete this.program},e}();t.GPUProgram=a},647:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.INT_TYPE=t.FLOAT_TYPE=t.INT_4D_UNIFORM=t.INT_3D_UNIFORM=t.INT_2D_UNIFORM=t.INT_1D_UNIFORM=t.FLOAT_4D_UNIFORM=t.FLOAT_3D_UNIFORM=t.FLOAT_2D_UNIFORM=t.FLOAT_1D_UNIFORM=void 0,t.FLOAT_1D_UNIFORM="1f",t.FLOAT_2D_UNIFORM="2f",t.FLOAT_3D_UNIFORM="3f",t.FLOAT_4D_UNIFORM="3f",t.INT_1D_UNIFORM="1i",t.INT_2D_UNIFORM="2i",t.INT_3D_UNIFORM="3i",t.INT_4D_UNIFORM="3i",t.FLOAT_TYPE="FLOAT",t.INT_TYPE="INT"},561:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SingleColorFragShader=t.GPGPU=void 0;var n=r(576);Object.defineProperty(t,"GPGPU",{enumerable:!0,get:function(){return n.GPGPU}});var i=r(929);t.SingleColorFragShader=i.default},416:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\n\nattribute vec2 aPosition;\n\nuniform vec2 u_scale;\nuniform vec2 u_translation;\n\nvarying vec2 vUV_local;\nvarying vec2 vUV;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tvUV_local = 0.5 * (aPosition + 1.0);\n\t// Apply transformations.\n\tvec2 position = u_scale * aPosition + u_translation;\n\t// Calculate a global uv for the viewport.\n\tvUV = 0.5 * (position + 1.0);\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}\n"},929:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\n\nuniform vec3 u_color;\n\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},989:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compileShader=void 0,t.compileShader=function(e,t,r,n){var i=e.createShader(n);return i?(e.shaderSource(i,r),e.compileShader(i),e.getShaderParameter(i,e.COMPILE_STATUS)?i:(t("Could not compile "+(n===e.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t shader: "+e.getShaderInfoLog(i)),null)):(t("Unable to init gl shader."),null)}},645:e=>{e.exports="precision lowp float;\n\nvarying vec2 vUV;\nuniform sampler2D u_state;\nuniform vec2 u_pxSize;\n\nvoid main() {\n\tfloat currentState = texture2D(u_state, vUV).r;\n\n\tint count = 0;\n\tfor (int i = -1; i < 2; i++) {\n\t\tfor (int j =- 1; j < 2; j++) {\n\t\t\tif (i == 0 && j == 0) continue;\n\t\t\tvec2 neighborUV = vUV + vec2(u_pxSize.x * float(i), u_pxSize.y * float(j));\n\t\t\tif (texture2D(u_state, neighborUV).r == 1.0) count++;\n\t\t}\n\t}\n\n\t// https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules\n\tif (count == 3 || (currentState == 1.0 && count == 2)) {\n\t\tgl_FragColor = vec4(1);\n\t\treturn;\n\t}\n\tgl_FragColor = vec4(0, 0, 0,1);\n}"},950:e=>{e.exports="precision lowp float;\n\nvarying vec2 vUV_local;\nuniform sampler2D u_noiseLookup;\n\nvoid main() {\n\tfloat state = texture2D(u_noiseLookup, vUV_local).r;\n\tgl_FragColor = vec4(state, 0, 0, 1);\n}\n"},539:e=>{e.exports="precision lowp float;\n\nvarying vec2 vUV;\nuniform sampler2D u_state;\n\nvoid main() {\n\tfloat currentState = texture2D(u_state, vUV).r;\n\tgl_FragColor = vec4(currentState, currentState, currentState, 1);\n}"}},t={};!function r(n){if(t[n])return t[n].exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,