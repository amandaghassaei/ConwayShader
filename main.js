(()=>{var e={607:(e,t,r)=>{"use strict";var i=r(561),n=r(645),o=r(539),a=r(950),s=document.getElementById("glcanvas"),u=new i.GPGPU(null,s);u.initProgram("gol",n,[{name:"u_state",value:0,dataType:"INT"},{name:"u_pxSize",value:[1/s.clientWidth,1/s.clientHeight],dataType:"FLOAT"}]),u.initProgram("render",o,[{name:"u_state",value:0,dataType:"INT"}]),u.initProgram("interaction",a,[{name:"u_noiseLookup",value:0,dataType:"INT"}]);function l(e,t){void 0===t&&(t=.1);for(var r=new Uint8Array(e),i=0,n=r.length;i<n;i++)r[i]=Math.random()<t?255:0;return r}function f(){var e=s.clientWidth,t=s.clientHeight,r=l(e*t);u.initTexture("currentState",e,t,"uint8",1,!0,void 0,!0),u.initTexture("lastState",e,t,"uint8",1,!0,r,!0),u.setProgramUniform("gol","u_pxSize",[1/e,1/t],"FLOAT"),u.onResize(s)}u.initTexture("noiseLookup",20,20,"uint8",1,!1,l(400,.5)),window.onmousemove=function(e){u.stepCircle("interaction",[e.clientX,e.clientY],10,["noiseLookup"],"lastState")},window.ontouchmove=function(e){for(var t=0;t>e.touches.length;t++){var r=e.touches[t];u.stepCircle("interaction",[r.pageX,r.pageY],10,["noiseLookup"],"lastState")}},window.addEventListener("resize",f),f(),window.requestAnimationFrame((function e(){u.step("gol",["lastState"],"currentState"),u.step("render",["currentState"]),u.swapTextures("currentState","lastState"),window.requestAnimationFrame(e)}))},576:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPGPU=void 0;for(var i=r(416),n=r(647),o=new Float32Array([-1,-1,1,-1,-1,1,1,1]),a=new Float32Array([-1,-1,1,-1,1,1,-1,1]),s=[0,0],u=0;u<=20;u++)s.push(Math.cos(2*Math.PI*u/20),Math.sin(2*Math.PI*u/20));var l=new Float32Array(s),f=function(){function e(e,t,r){void 0===r&&(r=function(e){throw new Error(e)}),this.errorState=!1,this.programs={},this.textures={},this.framebuffers={},this.shaders=[];var n=this;if(this.errorCallback=function(e){n.errorState=!0,r&&r(e)},e||null!==(e=t.getContext("webgl2",{antialias:!1})||t.getContext("webgl",{antialias:!1}))){this.gl=e,e.HALF_FLOAT||this.loadExtension("OES_texture_half_float"),this.linearFilterEnabled=this.loadExtension("OES_texture_half_float_linear",!0),e.disable(e.DEPTH_TEST),e.pixelStorei(e.UNPACK_ALIGNMENT,1);var s=this.compileShader(i.default,e.VERTEX_SHADER);if(s){this.defaultVertexShader=s,this.quadPositionsBuffer=this.initVertexBuffer(o),this.boundaryPositionsBuffer=this.initVertexBuffer(a),this.circlePositionsBuffer=this.initVertexBuffer(l),e.bindBuffer(e.ARRAY_BUFFER,null),this.onResize(t);var u=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);console.log(u+" textures max.")}else r("Unable to initialize fullscreen quad vertex shader.")}else r("Unable to initialize WebGL context.")}return e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,i=r.createBuffer();if(i)return r.bindBuffer(r.ARRAY_BUFFER,i),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),i;t("Unable to allocate gl buffer.")},e.prototype.loadExtension=function(e,t){var r;void 0===t&&(t=!1);try{r=this.gl.getExtension(e)}catch(e){}return r||console.warn("Unsupported "+(t?"optional ":"")+"extension: "+e+"."),r||t||this.errorCallback("Required extension unsupported by this device / browser: "+e+"."),!!r},e.prototype.compileShader=function(e,t){var r=this.gl,i=r.createShader(t);return i?(r.shaderSource(i,e),r.compileShader(i),r.getShaderParameter(i,r.COMPILE_STATUS)?(this.shaders.push(i),i):(this.errorCallback("Could not compile "+(t===r.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t\t shader: "+r.getShaderInfoLog(i)),null)):(this.errorCallback("Unable to init gl shader."),null)},e.prototype.initProgram=function(e,t,r){var i=this,n=this.programs,o=this.gl;if(n[e])return o.useProgram(n[e].program),void console.warn("Already a program with the name "+e+".");var a=this.compileShader(t,o.FRAGMENT_SHADER),s=this.defaultVertexShader;if(a&&s){var u=o.createProgram();u?(o.attachShader(u,s),o.attachShader(u,a),o.linkProgram(u),o.getProgramParameter(u,o.LINK_STATUS)||this.errorCallback("Program "+e+" filed to link: "+o.getProgramInfoLog(u)),n[e]={program:u,uniforms:{}},null==r||r.forEach((function(t){var r=t.name,n=t.value,o=t.dataType;i.setProgramUniform(e,r,n,o)}))):this.errorCallback("Unable to init gl program.")}else this.errorCallback("Unable to init shaders for program "+e+".")},e.prototype.uniformTypeForValue=function(e,t){if(t===n.FLOAT_TYPE){if(!isNaN(e)||1===e.length)return n.FLOAT_1D_UNIFORM;if(2===e.length)return n.FLOAT_2D_UNIFORM;if(3===e.length)return n.FLOAT_3D_UNIFORM;if(4===e.length)return n.FLOAT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}if(t===n.INT_TYPE){if(!isNaN(e)||1===e.length)return n.INT_1D_UNIFORM;if(2===e.length)return n.INT_2D_UNIFORM;if(3===e.length)return n.INT_3D_UNIFORM;if(4===e.length)return n.INT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}throw new Error("Invalid uniform data type: "+t)},e.prototype.setProgramUniform=function(e,t,r,i){var o=this.gl,a=this.programs[e];if(!a)throw new Error("Count not set uniform, no program of name: "+e+".");o.useProgram(a.program);var s=a.uniforms,u=this.uniformTypeForValue(r,i);if(!s[t]){var l=o.getUniformLocation(a.program,t);if(!l)return void this.errorCallback("Could not init uniform "+t+" for program "+e+".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type "+u+".\nError code: "+o.getError()+".");s[t]={location:l,type:u}}var f=s[t];if(f.type!=u)throw new Error("Uniform "+t+" cannot change from type "+f.type+" to type "+u+".");var h=f.location;switch(u){case n.FLOAT_1D_UNIFORM:o.uniform1f(h,r);break;case n.FLOAT_2D_UNIFORM:o.uniform2fv(h,r);break;case n.FLOAT_3D_UNIFORM:o.uniform3fv(h,r);break;case n.FLOAT_4D_UNIFORM:o.uniform4fv(h,r);break;case n.INT_1D_UNIFORM:o.uniform1i(h,r);break;case n.INT_2D_UNIFORM:o.uniform2iv(h,r);break;case n.INT_3D_UNIFORM:o.uniform3iv(h,r);break;case n.INT_4D_UNIFORM:o.uniform4iv(h,r);break;default:throw new Error("Unknown uniform type: "+u+".")}},e.prototype.initFramebufferForTexture=function(e,t){void 0===t&&(t=!1);var r=this.gl,i=this.framebuffers;i[e]&&(t||console.warn("Already a framebuffer with the name "+e+", use shouldOverwrite flag in initTexture() to ignore."),r.deleteFramebuffer(i[e]));var n=this.textures[e];if(!n)throw new Error("Cannot init framebuffer, texture "+e+" does not exist.");var o=r.createFramebuffer();if(o){r.bindFramebuffer(r.FRAMEBUFFER,o),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,n,0);var a=r.checkFramebufferStatus(r.FRAMEBUFFER);a!=r.FRAMEBUFFER_COMPLETE&&this.errorCallback("Invalid status for "+e+" framebuffer: "+a+"."),this.framebuffers[e]=o}else this.errorCallback("Could not init "+e+" framebuffer: "+r.getError()+".")},e.prototype.glTextureFormatForNumChannels=function(e){var t=this.gl;switch(e){case 1:case 2:case 3:return{glFormat:t.RGB,glNumChannels:3};case 4:return{glFormat:t.RGBA,glNumChannels:4}}},e.prototype.glTextureTypeForType=function(e){var t=this.gl;switch(e){case"float16":return t.HALF_FLOAT?t.HALF_FLOAT:t.HALF_FLOAT_OES;case"uint8":return t.UNSIGNED_BYTE}},e.prototype.initTexture=function(e,t,r,i,n,o,a,s){void 0===o&&(o=!1),void 0===s&&(s=!1);var u=this,l=u.gl,f=u.textures,h=u.framebuffers;if(f[e]&&(s||console.warn("Already a texture with the name "+e+", use shouldOverwrite flag to ignore."),l.deleteTexture(f[e])),a&&a.length!==t*r*n)throw new Error("Invalid data array of size "+a.length+" for texture of dimensions "+t+" x "+r+" x "+n+".");var c=l.createTexture();if(c){l.bindTexture(l.TEXTURE_2D,c),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE);var _=l.NEAREST;l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,_),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,_);var m=this.glTextureFormatForNumChannels(n),d=m.glFormat,T=m.glNumChannels,p=this.glTextureTypeForType(i);if(a&&n!==T){var g=t*r,v=void 0;switch(i){case"uint8":v=new Uint8Array(t*r*T);break;default:throw new Error("Unsupported type "+i+" for initTexture.")}for(var F=0;F<g;F++)for(var E=0;E<n;E++)v[T*F+E]=a[F*n+E];a=v}l.texImage2D(l.TEXTURE_2D,0,d,t,r,0,d,p,a||null),f[e]=c,o?this.initFramebufferForTexture(e,s):s&&h[e]&&(l.deleteFramebuffer(h[e]),delete h[e])}else this.errorCallback("Could not init "+e+" texture: "+l.getError()+".")},e.prototype.onResize=function(e){var t=this.gl,r=e.clientWidth,i=e.clientHeight;t.viewport(0,0,r,i),e.width=r,e.height=i,this.width=r,this.height=i},e.prototype._step=function(e,t,r){var i=this,n=i.gl,o=i.programs,a=i.framebuffers,s=o[e];if(!s)throw new Error("Invalid program name: "+e+".");n.useProgram(s.program);var u=r?a[r]:null;if(void 0===u)throw new Error("Invalid output texture: "+r+".");n.bindFramebuffer(n.FRAMEBUFFER,u);for(var l=0;l<t.length;l++)n.activeTexture(n.TEXTURE0+l),n.bindTexture(n.TEXTURE_2D,this.textures[t[l]]);var f=n.getAttribLocation(s.program,"aPosition");n.vertexAttribPointer(f,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(f)},e.prototype.step=function(e,t,r){void 0===t&&(t=[]);var i=this,n=i.gl,o=i.errorState,a=i.quadPositionsBuffer;o||(this.setProgramUniform(e,"u_scale",[1,1],"FLOAT"),this.setProgramUniform(e,"u_translation",[0,0],"FLOAT"),n.bindBuffer(n.ARRAY_BUFFER,a),this._step(e,t,r),n.drawArrays(n.TRIANGLE_STRIP,0,4))},e.prototype.stepBoundary=function(e,t,r){void 0===t&&(t=[]);var i=this,n=i.gl,o=i.errorState,a=i.boundaryPositionsBuffer;o||(this.setProgramUniform(e,"u_scale",[1,1],"FLOAT"),this.setProgramUniform(e,"u_translation",[0,0],"FLOAT"),n.bindBuffer(n.ARRAY_BUFFER,a),this._step(e,t,r),n.drawArrays(n.LINE_LOOP,0,4))},e.prototype.stepCircle=function(e,t,r,i,n){void 0===i&&(i=[]);var o=this,a=o.gl,s=o.errorState,u=o.circlePositionsBuffer,l=o.width,f=o.height;s||(this.setProgramUniform(e,"u_scale",[r/l,r/f],"FLOAT"),this.setProgramUniform(e,"u_translation",[2*t[0]/l-1,-2*t[1]/f+1],"FLOAT"),a.bindBuffer(a.ARRAY_BUFFER,u),this._step(e,i,n),a.drawArrays(a.TRIANGLE_FAN,0,22))},e.prototype.swapTextures=function(e,t){var r=this.textures[e];this.textures[e]=this.textures[t],this.textures[t]=r,r=this.framebuffers[e],this.framebuffers[e]=this.framebuffers[t],this.framebuffers[t]=r},e.prototype.reset=function(){var e=this,t=e.gl,r=e.programs,i=e.framebuffers,n=e.textures,o=e.shaders,a=e.defaultVertexShader;Object.keys(r).forEach((function(e){var i=r[e].program;t.deleteProgram(i),delete r[e]})),Object.keys(i).forEach((function(e){var r=i[e];t.deleteFramebuffer(r),delete i[e]})),Object.keys(n).forEach((function(e){var r=n[e];t.deleteTexture(r),delete n[e]}));for(var s=o.length-1;s>=0;s--)o[s]!==a&&(t.deleteShader(o[s]),o.splice(s,1))},e}();t.GPGPU=f},647:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.INT_TYPE=t.FLOAT_TYPE=t.INT_4D_UNIFORM=t.INT_3D_UNIFORM=t.INT_2D_UNIFORM=t.INT_1D_UNIFORM=t.FLOAT_4D_UNIFORM=t.FLOAT_3D_UNIFORM=t.FLOAT_2D_UNIFORM=t.FLOAT_1D_UNIFORM=void 0,t.FLOAT_1D_UNIFORM="1f",t.FLOAT_2D_UNIFORM="2f",t.FLOAT_3D_UNIFORM="3f",t.FLOAT_4D_UNIFORM="3f",t.INT_1D_UNIFORM="1i",t.INT_2D_UNIFORM="2i",t.INT_3D_UNIFORM="3i",t.INT_4D_UNIFORM="3i",t.FLOAT_TYPE="FLOAT",t.INT_TYPE="INT"},561:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPGPU=void 0;var i=r(576);Object.defineProperty(t,"GPGPU",{enumerable:!0,get:function(){return i.GPGPU}})},416:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\nattribute vec2 aPosition;\nuniform vec2 u_scale;\nuniform vec2 u_translation;\nvarying vec2 uv;\nvoid main() {\n\t// Calculate UV coordinates [0, 1].\n\tuv = 0.5 * (aPosition + 1.0);\n\t// Apply transformations.\n\tvec2 position = u_scale * aPosition + u_translation;\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}\n"},645:e=>{e.exports="precision lowp float;\n\nvarying vec2 uv;\nuniform sampler2D u_state;\nuniform vec2 u_pxSize;\n\nvoid main() {\n\tfloat currentState = texture2D(u_state, uv).r;\n\n\tint count = 0;\n\tfor (int i = -1; i < 2; i++) {\n\t\tfor (int j =- 1; j < 2; j++) {\n\t\t\tif (i == 0 && j == 0) continue;\n\t\t\tvec2 neighborUV = uv + vec2(u_pxSize.x * float(i), u_pxSize.y * float(j)); // TODO: need float()?\n\t\t\tif (texture2D(u_state, neighborUV).r == 1.0) count++;\n\t\t}\n\t}\n\n\t// https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules\n\tif (count == 3 || (currentState == 1.0 && count == 2)) {\n\t\tgl_FragColor = vec4(1);\n\t\treturn;\n\t}\n\tgl_FragColor = vec4(0, 0, 0,1);\n}"},950:e=>{e.exports="precision lowp float;\n\nvarying vec2 uv;\nuniform sampler2D u_noiseLookup;\n\nvoid main() {\n\tfloat state = texture2D(u_noiseLookup, uv).r;\n\tgl_FragColor = vec4(state, 0, 0, 1);\n}\n"},539:e=>{e.exports="precision lowp float;\n\nvarying vec2 uv;\nuniform sampler2D u_state;\n\nvoid main() {\n\tfloat currentState = texture2D(u_state, uv).r;\n\tgl_FragColor = vec4(currentState, currentState, currentState, 1);\n}"}},t={};!function r(i){if(t[i])return t[i].exports;var n=t[i]={exports:{}};return e[i](n,n.exports,r),n.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,