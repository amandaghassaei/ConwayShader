(()=>{var e={241:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataLayer=void 0;var n=r(741),a=r(299),i=function(){function e(e,t,r,n,a,i){if(this.bufferIndex=0,this.buffers=[],this.name=e,this.gl=t,this.errorCallback=n,i<0||i%1!=0)throw new Error("Invalid numBuffers: "+i+" for DataLayer "+this.name+", must be positive integer.");if(this.numBuffers=i,isNaN(r.dimensions))this.width=r.dimensions[0],this.height=r.dimensions[1];else{if(r.dimensions<1)throw new Error("Invalid length "+r.dimensions+" for DataLayer "+e+".");this.length=r.dimensions;var o=this.calcWidthHeight(r.dimensions),s=o[0],u=o[1];this.width=s,this.height=u}this.type=this.checkType(r.type),this.numComponents=r.numComponents,this.writable=a;var l=r.filter?r.filter:this.length?"NEAREST":"LINEAR";this.filter=this.checkFilter(l,this.type),this.wrapS=t[r.wrapS?r.wrapS:"CLAMP_TO_EDGE"],this.wrapT=t[r.wrapT?r.wrapT:"CLAMP_TO_EDGE"];var f=this.getGLTextureParameters(),h=f.glFormat,c=f.glInternalFormat,d=f.glType,p=f.glNumChannels;this.glInternalFormat=c,this.glFormat=h,this.glType=d,this.glNumChannels=p,this.initBuffers(r.data)}return e.prototype.calcWidthHeight=function(e){for(var t=1,r=e;r>2;)t++,r/=2;return[Math.pow(2,Math.floor(t/2)+t%2),Math.pow(2,Math.floor(t/2))]},e.prototype.checkFilter=function(e,t){var r=this.gl,a=this.errorCallback;return"NEAREST"===e||("float16"===t&&(n.getExtension(r,n.OES_TEXTURE_HAlF_FLOAT_LINEAR,a,!0)||n.getExtension(r,n.OES_TEXTURE_FLOAT_LINEAR,a,!0)||(e="NEAREST")),"float32"===t&&(n.getExtension(r,n.OES_TEXTURE_FLOAT_LINEAR,a,!0)||(e="NEAREST"))),r[e]},e.prototype.checkType=function(e){var t=this.gl,r=this.errorCallback;return a.isWebGL2(t)||("float32"===e&&(n.getExtension(t,n.OES_TEXTURE_FLOAT,r,!0)||(e="float16")),"float16"===e&&n.getExtension(t,n.OES_TEXTURE_HALF_FLOAT,r)),!a.isWebGL2(t)||"float16"!==e&&"float32"!==e||n.getExtension(t,n.EXT_COLOR_BUFFER_FLOAT,r),e},e.prototype.checkDataArray=function(e){if(e){var t=this,r=t.width,n=t.height,a=t.length,i=t.numComponents,o=t.glNumChannels,s=t.type,u=t.name;if(a&&e.length!==a*i||!a&&e.length!==r*n*i)throw new Error("Invalid data length "+e.length+" for DataLayer "+u+" of size "+(a||r+"x"+n)+"x"+i+".");var l=!1;switch(s){case"float32":l=l||e.constructor!==Float32Array;break;case"float16":throw new Error("setting float16 from data not supported yet.");case"uint8":l=l||e.constructor!==Uint8Array;break;case"int8":l=l||e.constructor!==Int8Array;break;case"uint16":l=l||e.constructor!==Uint16Array;break;case"int16":l=l||e.constructor!==Int16Array;break;case"uint32":l=l||e.constructor!==Uint32Array;break;case"int32":l=l||e.constructor!==Int32Array;break;default:throw new Error("Error initing "+u+".  Unsupported type "+s+" for GLCompute.initDataLayer.")}if(l)throw new Error("Invalid TypedArray of type "+e.constructor.name+" supplied to DataLayer "+u+" of type "+s+".");var f=e,h=r*n*o;if(f.length<h){switch(s){case"float32":f=new Float32Array(h);break;case"uint8":f=new Uint8Array(h);break;case"int8":f=new Int8Array(h);break;case"uint16":f=new Uint16Array(h);break;case"int16":f=new Int16Array(h);break;case"uint32":f=new Uint32Array(h);break;case"int32":f=new Int32Array(h);break;default:throw new Error("Error initing "+u+".  Unsupported type "+s+" for GLCompute.initDataLayer.")}for(var c=0,d=e.length/i;c<d;c++)for(var p=0;p<i;p++)f[c*o+p]=e[c*i+p]}return f}},e.prototype.getGLTextureParameters=function(){var e,t,r,i,o=this,s=o.gl,u=o.numComponents,l=o.type,f=o.writable,h=o.name,c=o.errorCallback;if(a.isWebGL2(s)){switch(i=u,3===u&&f&&(i=4),i){case 1:t=s.RED;break;case 2:t=s.RG;break;case 3:t=s.RGB;break;case 4:t=s.RGBA;break;default:throw new Error("Unsupported glNumChannels "+i+" for DataLayer "+h+".")}switch(l){case"float32":switch(e=s.FLOAT,i){case 1:r=s.R32F;break;case 2:r=s.RG32F;break;case 3:r=s.RGB32F;break;case 4:r=s.RGBA32F;break;default:throw new Error("Unsupported glNumChannels "+i+" for DataLayer "+h+".")}break;case"float16":switch(e=s.HALF_FLOAT,i){case 1:r=s.R16F;break;case 2:r=s.RG16F;break;case 3:r=s.RGB16F;break;case 4:r=s.RGBA16F;break;default:throw new Error("Unsupported glNumChannels "+i+" for DataLayer "+h+".")}break;case"int8":switch(e=s.BYTE,i){case 1:r=s.R8I;break;case 2:r=s.RG8I;break;case 3:r=s.RGB8I;break;case 4:r=s.RGBA8I;break;default:throw new Error("Unsupported glNumChannels "+i+" for DataLayer "+h+".")}break;case"uint8":switch(e=s.UNSIGNED_BYTE,i){case 1:r=s.R8;break;case 2:r=s.RG8;break;case 3:r=s.RGB;break;case 4:r=s.RGBA;break;default:throw new Error("Unsupported glNumChannels "+i+" for DataLayer "+h+".")}break;case"int16":switch(e=s.SHORT,i){case 1:r=s.R16I;break;case 2:r=s.RG16I;break;case 3:r=s.RGB16I;break;case 4:r=s.RGBA16I;break;default:throw new Error("Unsupported glNumChannels "+i+" for DataLayer "+h+".")}case"uint16":switch(e=s.UNSIGNED_SHORT,i){case 1:r=s.R16UI;break;case 2:r=s.RG16UI;break;case 3:r=s.RGB16UI;break;case 4:r=s.RGBA16UI;break;default:throw new Error("Unsupported glNumChannels "+i+" for DataLayer "+h+".")}break;case"int32":switch(e=s.INT,i){case 1:r=s.R32I;break;case 2:r=s.RG32I;break;case 3:r=s.RGB32I;break;case 4:r=s.RGBA32I;break;default:throw new Error("Unsupported glNumChannels "+i+" for DataLayer "+h+".")}case"uint32":switch(e=s.UNSIGNED_INT,i){case 1:r=s.R32UI;break;case 2:r=s.RG32UI;break;case 3:r=s.RGB32UI;break;case 4:r=s.RGBA32UI;break;default:throw new Error("Unsupported glNumChannels "+i+" for DataLayer "+h+".")}break;default:throw new Error("Unsupported type "+l+" for DataLayer "+h+".")}}else{switch(u){case 1:case 2:case 3:t=s.RGB,r=s.RGB,i=3;break;case 4:t=s.RGBA,r=s.RGBA,i=4;break;default:throw new Error("Unsupported numComponents "+u+" for DataLayer "+h+".")}switch(l){case"float32":e=s.FLOAT;break;case"float16":e=n.getExtension(s,n.OES_TEXTURE_HALF_FLOAT,c).HALF_FLOAT_OES;break;case"uint8":e=s.UNSIGNED_BYTE;break;case"uint16":n.getExtension(s,n.WEBGL_DEPTH_TEXTURE,c),e=s.UNSIGNED_SHORT;break;case"uint32":n.getExtension(s,n.WEBGL_DEPTH_TEXTURE,c),e=s.UNSIGNED_INT;break;default:throw new Error("Unsupported type "+l+" for DataLayer "+h+".")}}if(void 0===e||void 0===t||void 0===r)throw new Error("Invalid type: "+l+" or numComponents "+u+".");if(void 0===i||u<1||u>4)throw new Error("Invalid numChannels: "+u+".");return{glFormat:t,glInternalFormat:r,glType:e,glNumChannels:i}},e.prototype.initBuffers=function(e){for(var t=this,r=t.numBuffers,n=t.gl,a=t.width,i=t.height,o=t.glInternalFormat,s=t.glFormat,u=t.glType,l=t.filter,f=t.wrapS,h=t.wrapT,c=t.writable,d=t.errorCallback,p=this.checkDataArray(e),g=0;g<r;g++){var m=n.createTexture();if(!m)return void d("Could not init texture for DataLayer "+this.name+": "+n.getError()+".");n.bindTexture(n.TEXTURE_2D,m),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,f),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,h),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,l),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,l),n.texImage2D(n.TEXTURE_2D,0,o,a,i,0,s,u,p||null);var E={texture:m};if(c){var v=n.createFramebuffer();if(!v)return void d("Could not init framebuffer for DataLayer "+this.name+": "+n.getError()+".");n.bindFramebuffer(n.FRAMEBUFFER,v),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,m,0);var b=n.checkFramebufferStatus(n.FRAMEBUFFER);b!=n.FRAMEBUFFER_COMPLETE&&d("Invalid status for framebuffer for DataLayer "+this.name+": "+b+"."),E.framebuffer=v}this.buffers.push(E)}n.bindFramebuffer(n.FRAMEBUFFER,null)},e.prototype.getCurrentStateTexture=function(){return this.buffers[this.bufferIndex].texture},e.prototype.bindOutputBuffer=function(e){var t=this.gl;e&&(this.bufferIndex=(this.bufferIndex+1)%this.numBuffers);var r=this.buffers[this.bufferIndex].framebuffer;if(!r)throw new Error("DataLayer "+this.name+" is not writable.");t.bindFramebuffer(t.FRAMEBUFFER,r)},e.prototype.resize=function(e,t){if(isNaN(e)){if(this.length)throw new Error("Invalid dimensions "+e+" for 1D DataLayer "+this.name+", please specify a length as a number.");this.width=e[0],this.height=e[1]}else{if(!this.length)throw new Error("Invalid dimensions "+e+" for 2D DataLayer "+this.name+", please specify a width and height as an array.");this.length=e;var r=this.calcWidthHeight(this.length),n=r[0],a=r[1];this.width=n,this.height=a}this.destroyBuffers(),this.initBuffers(t)},e.prototype.getDimensions=function(){return{width:this.width,height:this.height}},e.prototype.getLength=function(){if(!this.length)throw new Error("Cannot call getLength() on 2D DataLayer "+this.name+".");return this.length},e.prototype.destroyBuffers=function(){var e=this.gl,t=this.buffers;t.forEach((function(t){var r=t.framebuffer,n=t.texture;e.deleteTexture(n),r&&e.deleteFramebuffer(r),delete t.texture,delete t.framebuffer})),t.length=0},e.prototype.destroy=function(){this.destroyBuffers(),delete this.gl,delete this.errorCallback},e}();t.DataLayer=i},821:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GLCompute=void 0;for(var n=r(881),a=r(656),i=r(241),o=r(547),s=r(299),u=new Float32Array([-1,-1,1,-1,-1,1,1,1]),l=new Float32Array([-1,-1,1,-1,1,1,-1,1]),f=[0,0],h=0;h<=20;h++)f.push(Math.cos(2*Math.PI*h/20),Math.sin(2*Math.PI*h/20));var c=new Float32Array(f),d=function(){function e(e,t,r,i){void 0===i&&(i=function(e){throw new Error(e)}),this.errorState=!1;var o=this;if(this.errorCallback=function(e){o.errorState||(o.errorState=!0,i&&i(e))},e||null!==(e=t.getContext("webgl2",r)||t.getContext("webgl",r)||t.getContext("experimental-webgl",r))){s.isWebGL2(e)?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=e,e.disable(e.DEPTH_TEST),e.pixelStorei(e.UNPACK_ALIGNMENT,1);var f=s.compileShader(e,this.errorCallback,n.default,e.VERTEX_SHADER);if(f){this.defaultVertexShader=f,this.passThroughProgram=this.initProgram("passThrough",a.default,[{name:"u_state",value:0,dataType:"INT"}]),this.quadPositionsBuffer=this.initVertexBuffer(u),this.boundaryPositionsBuffer=this.initVertexBuffer(l),this.circlePositionsBuffer=this.initVertexBuffer(c),e.bindBuffer(e.ARRAY_BUFFER,null),this.onResize(t);var h=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);console.log(h+" textures max.")}else this.errorCallback("Unable to initialize fullscreen quad vertex shader.")}else this.errorCallback("Unable to initialize WebGL context.")}return e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),n;t("Unable to allocate gl buffer.")},e.prototype.initProgram=function(e,t,r,n){var a=this.gl,i=this.errorCallback;return new o.GPUProgram(e,a,i,n||this.defaultVertexShader,t,r)},e.prototype.initDataLayer=function(e,t,r,n){void 0===r&&(r=!1),void 0===n&&(n=1);var a=this.gl,o=this.errorCallback;return new i.DataLayer(e,a,t,o,r,n)},e.prototype.onResize=function(e){this.gl;var t=e.clientWidth,r=e.clientHeight;e.width=t,e.height=r,this.width=t,this.height=r},e.prototype.drawSetup=function(e,t,r,n){var a=this.gl;if(e.program){var i=r.map((function(e){return e.getCurrentStateTexture()}));this.setOutputLayer(t,r,n),a.useProgram(e.program);for(var o=0;o<i.length;o++)a.activeTexture(a.TEXTURE0+o),a.bindTexture(a.TEXTURE_2D,i[o])}},e.prototype.setOutputLayer=function(e,t,r){var n=this.gl,a=this.passThroughProgram;if(r){if(t.indexOf(r)>-1){if(1===r.numBuffers)throw new Error("\nCannot use same buffer for input and output of a program.\nTry increasing the number of buffers in your output layer to at least 2 so you\ncan render to nextState using currentState as an input.");e?r.bindOutputBuffer(!0):(this.step(a,[r],r),r.bindOutputBuffer(!1))}else r.bindOutputBuffer(!1);var i=r.getDimensions(),o=i.width,s=i.height;n.viewport(0,0,o,s)}else{n.bindFramebuffer(n.FRAMEBUFFER,null);var u=this.width,l=this.height;n.viewport(0,0,u,l)}},e.prototype.setPositionAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e.program,"aPosition");t.vertexAttribPointer(r,2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.setIndexAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e.program,"aIndex");t.vertexAttribPointer(r,1,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.step=function(e,t,r,n){void 0===t&&(t=[]);var a=this,i=a.gl,o=a.errorState,s=a.quadPositionsBuffer;o||(this.drawSetup(e,!0,t,r),e.setUniform("u_scale",[1,1],"FLOAT"),e.setUniform("u_translation",[0,0],"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,s),this.setPositionAttribute(e),(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),i.drawArrays(i.TRIANGLE_STRIP,0,4),i.disable(i.BLEND))},e.prototype.stepBoundary=function(e,t,r,n){void 0===t&&(t=[]);var a=this,i=a.gl,o=a.errorState,s=a.boundaryPositionsBuffer;if(!o){this.drawSetup(e,!1,t,r);var u=r?r.getDimensions():this,l=[1/u.width,1/u.height];e.setUniform("u_scale",[1-l[0],1-l[1]],"FLOAT"),e.setUniform("u_translation",l,"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,s),this.setPositionAttribute(e),(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),i.drawArrays(i.LINE_LOOP,0,4),i.disable(i.BLEND)}},e.prototype.stepNonBoundary=function(e,t,r,n){void 0===t&&(t=[]);var a=this,i=a.gl,o=a.errorState,s=a.quadPositionsBuffer;if(!o){this.drawSetup(e,!1,t,r);var u=r?r.getDimensions():this,l=[1/u.width,1/u.height];e.setUniform("u_scale",[1-2*l[0],1-2*l[1]],"FLOAT"),e.setUniform("u_translation",l,"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,s),this.setPositionAttribute(e),(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),i.drawArrays(i.TRIANGLE_STRIP,0,4),i.disable(i.BLEND)}},e.prototype.stepCircle=function(e,t,r,n,a,i){void 0===n&&(n=[]);var o=this,s=o.gl,u=o.errorState,l=o.circlePositionsBuffer,f=o.width,h=o.height;u||(this.drawSetup(e,!1,n,a),e.setUniform("u_scale",[r/f,r/h],"FLOAT"),e.setUniform("u_translation",[2*t[0]/f-1,2*t[1]/h-1],"FLOAT"),s.bindBuffer(s.ARRAY_BUFFER,l),this.setPositionAttribute(e),(null==i?void 0:i.shouldBlendAlpha)&&(s.enable(s.BLEND),s.blendFunc(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA)),s.drawArrays(s.TRIANGLE_FAN,0,22),s.disable(s.BLEND))},e.prototype.drawPoints=function(e,t,r,n){var a=this,i=a.gl,o=a.errorState,s=a.width,u=a.height,l=a.pointIndexArray;if(!o){if(t.length<1)throw new Error("Invalid inputLayers for drawPoints on "+e.name+": must pass a positionDataLayer as first element of inputLayers.");var f=t[0],h=f.getLength(),c=(null==n?void 0:n.numPoints)||h;if(c>h)throw new Error("Invalid numPoint "+c+" for positionDataLayer of length "+h+".");var d=(null==n?void 0:n.pointSize)||1;this.drawSetup(e,!1,t,r),e.setUniform("u_scale",[1/s,1/u],"FLOAT"),e.setUniform("u_pointSize",d,"FLOAT");var p=f.getDimensions();if(e.setUniform("u_positionDimensions",[p.width,p.height],"FLOAT"),void 0===this.pointIndexBuffer||l&&l.length<c){for(var g=new Float32Array(h),m=0;m<h;m++)g[m]=m;this.pointIndexArray=g,this.pointIndexBuffer=this.initVertexBuffer(g)}i.bindBuffer(i.ARRAY_BUFFER,this.pointIndexBuffer),this.setIndexAttribute(e),!1!==(null==n?void 0:n.shouldBlendAlpha)&&(i.enable(i.BLEND),i.blendFunc(i.SRC_ALPHA,i.ONE_MINUS_SRC_ALPHA)),i.drawArrays(i.POINTS,0,c),i.disable(i.BLEND)}},e.prototype.reset=function(){},e.prototype.destroy=function(){},e}();t.GLCompute=d},547:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPUProgram=void 0;var n=r(299),a=function(){function e(e,t,r,a,i,o){var s=this;this.uniforms={},this.shaders=[],this.attributes={},this.attributeNames=[],this.name=e,this.gl=t,this.errorCallback=r;var u=t.createProgram();if(u){if("string"==typeof i){var l=n.compileShader(t,r,i,t.FRAGMENT_SHADER,e);if(!l)return void r("Unable to compile fragment shader for program "+e+".");this.shaders.push(l),t.attachShader(u,l)}else t.attachShader(u,i);if("string"==typeof a){var f=n.compileShader(t,r,a,t.VERTEX_SHADER,e);if(!f)return void r("Unable to compile vertex shader for program "+e+".");this.shaders.push(f),t.attachShader(u,f)}else t.attachShader(u,a);t.linkProgram(u),t.getProgramParameter(u,t.LINK_STATUS)?(this.program=u,null==o||o.forEach((function(e){var t=e.name,r=e.value,n=e.dataType;s.setUniform(t,r,n)}))):r("Program "+e+" failed to link: "+t.getProgramInfoLog(u))}else r("Unable to init gl program: "+e+".")}return e.prototype.uniformTypeForValue=function(e,t){if("FLOAT"===t){if(!isNaN(e)||1===e.length)return"1f";if(2===e.length)return"2f";if(3===e.length)return"3f";if(4===e.length)return"3f";throw new Error("Invalid uniform value: "+e)}if("INT"===t){if(!isNaN(e)||1===e.length)return"1i";if(2===e.length)return"2i";if(3===e.length)return"3i";if(4===e.length)return"3i";throw new Error("Invalid uniform value: "+e)}throw new Error("Invalid uniform data type: "+t)},e.prototype.setUniform=function(e,t,r){var n=this,a=n.gl,i=n.errorCallback,o=n.program,s=n.uniforms;if(o){a.useProgram(o);var u=this.uniformTypeForValue(t,r);if(!s[e]){var l=a.getUniformLocation(o,e);if(!l)return void i("Could not init uniform "+e+".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type "+u+".\nError code: "+a.getError()+".");s[e]={location:l,type:u}}var f=s[e];if(f.type!=u)throw new Error("Uniform "+e+" cannot change from type "+f.type+" to type "+u+".");var h=f.location;switch(u){case"1f":a.uniform1f(h,t);break;case"2f":a.uniform2fv(h,t);break;case"3f":a.uniform3fv(h,t);break;case"3f":a.uniform4fv(h,t);break;case"1i":a.uniform1i(h,t);break;case"2i":a.uniform2iv(h,t);break;case"3i":a.uniform3iv(h,t);break;case"3i":a.uniform4iv(h,t);break;default:throw new Error("Unknown uniform type: "+u+".")}}else i("Program not inited.")},e.prototype.setVertexAttribute=function(e,t){var r=this,a=r.gl,i=r.errorCallback,o=r.program,s=r.attributes,u=r.attributeNames;if(o){if(!n.isWebGL2(a))throw new Error("Must use a webgl2 context for transform feedback.");if(a.useProgram(o),!s[e]){var l=a.getAttribLocation(o,e);if(!l)return void i("Could not init vertexAttribute "+e+".\nError code: "+a.getError()+".");s[e]={location:l,type:t},u.push(e)}var f=s[e];if(f.type!=t)throw new Error("Vertex attribute "+e+" cannot change from type "+f.type+" to type "+t+".")}else i("Program not inited.")},e.prototype.getAttributeLocation=function(e){var t=this,r=t.attributes,n=t.attributeNames,a=t.name,i=n[e];if(!i)throw new Error("Invalid attribute index "+e+" for program "+a+", current attributes: "+n.join(", ")+".");var o=r[i];if(!o)throw new Error("Invalid attribute "+i+" for program "+a+".");return o.location},e.prototype.destroy=function(){var e=this,t=e.gl,r=e.program,n=e.shaders;r&&t.deleteProgram(r);for(var a=0;a<n.length;a++)t.deleteShader(n[a]);n.length=0,delete this.gl,delete this.errorCallback,delete this.program},e}();t.GPUProgram=a},741:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getExtension=t.EXT_COLOR_BUFFER_FLOAT=t.WEBGL_DEPTH_TEXTURE=t.OES_TEXTURE_HAlF_FLOAT_LINEAR=t.OES_TEXTURE_FLOAT_LINEAR=t.OES_TEXTURE_HALF_FLOAT=t.OES_TEXTURE_FLOAT=void 0;var r={};t.OES_TEXTURE_FLOAT="OES_texture_float",t.OES_TEXTURE_HALF_FLOAT="OES_texture_half_float",t.OES_TEXTURE_FLOAT_LINEAR="OES_texture_float_linear",t.OES_TEXTURE_HAlF_FLOAT_LINEAR="OES_texture_half_float_linear",t.WEBGL_DEPTH_TEXTURE="WEBGL_depth_texture",t.EXT_COLOR_BUFFER_FLOAT="EXT_color_buffer_float",t.getExtension=function(e,t,n,a){if(void 0===a&&(a=!1),void 0!==r[t])return r[t];var i;try{i=e.getExtension(t)}catch(e){}return i?(r[t]=i,console.log("Loaded extension: "+t+".")):(r[t]=!1,console.warn("Unsupported "+(a?"optional ":"")+"extension: "+t+".")),i||a||n("Required extension unsupported by this device / browser: "+t+"."),i}},621:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PassThroughFragmentShader=t.PointsVertexShader=t.SingleColorFragShader=t.GLCompute=void 0;var n=r(821);Object.defineProperty(t,"GLCompute",{enumerable:!0,get:function(){return n.GLCompute}});var a=r(390);t.SingleColorFragShader=a.default;var i=r(345);t.PointsVertexShader=i.default;var o=r(656);t.PassThroughFragmentShader=o.default},881:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\n\nattribute vec2 aPosition;\n\nuniform vec2 u_scale;\nuniform vec2 u_translation;\n\nvarying vec2 vUV_local;\nvarying vec2 vUV;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tvUV_local = 0.5 * (aPosition + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_scale * aPosition + u_translation;\n\n\t// Calculate a global uv for the viewport.\n\tvUV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}\n"},656:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\n\nvarying vec2 vUV;\nuniform sampler2D u_state;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_state, vUV);\n}"},345:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\nprecision highp int;\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float aIndex; // Index of point.\n\nuniform sampler2D u_positions; // Texture lookup with position data.\nuniform vec2 u_positionDimensions;\nuniform vec2 u_scale;\nuniform float u_pointSize;\n\nvarying vec2 vUV;\nvarying vec2 vParticleUV;\n\n/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvParticleUV = vec2(modI(aIndex, u_positionDimensions.x), floor(floor(aIndex + 0.5) / u_positionDimensions.x)) / u_positionDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\tvUV = texture2D(u_positions, vParticleUV).xy * u_scale;\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = vUV * 2.0 - 1.0;\n\n\tgl_PointSize = u_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}\n"},390:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\n\nuniform vec3 u_color;\n\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},299:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isWebGL2=t.compileShader=void 0,t.compileShader=function(e,t,r,n,a){var i=e.createShader(n);return i?(e.shaderSource(i,r),e.compileShader(i),e.getShaderParameter(i,e.COMPILE_STATUS)?i:(t("Could not compile "+(n===e.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t shader"+(a?" for program "+a:"")+": "+e.getShaderInfoLog(i)+"."),null)):(t("Unable to init gl shader."),null)},t.isWebGL2=function(e){return!!e.HALF_FLOAT}},607:(e,t,r)=>{"use strict";var n=r(621),a=r(645),i=r(539),o=r(950),s=document.getElementById("glcanvas"),u=new n.GLCompute(null,s,{antialias:!1}),l=u.initProgram("gol",a,[{name:"u_state",value:0,dataType:"INT"},{name:"u_pxSize",value:[1/s.clientWidth,1/s.clientHeight],dataType:"FLOAT"}]),f=u.initProgram("render",i,[{name:"u_state",value:0,dataType:"INT"}]),h=u.initProgram("interaction",o,[{name:"u_noiseLookup",value:0,dataType:"INT"}]);function c(e,t){void 0===t&&(t=.1);for(var r=new Uint8Array(e),n=0,a=r.length;n<a;n++)r[n]=Math.random()<t?255:0;return r}var d=u.initDataLayer("state",{dimensions:[s.clientWidth,s.clientHeight],type:"uint8",numComponents:1,data:c(s.clientWidth*s.clientHeight),filter:"NEAREST"},!0,2);function p(){var e=s.clientWidth,t=s.clientHeight;d.resize([e,t],c(e*t)),l.setUniform("u_pxSize",[1/e,1/t],"FLOAT"),u.onResize(s)}p(),window.addEventListener("resize",p);var g=u.initDataLayer("noise",{dimensions:[20,20],type:"uint8",numComponents:1,data:c(400,.5),filter:"NEAREST"});function m(e){e.preventDefault();var t="scale(1)";document.body.style.webkitTransform=t,document.body.style.msTransform=t,document.body.style.transform=t}s.addEventListener("mousemove",(function(e){u.stepCircle(h,[e.clientX,s.clientHeight-e.clientY],10,[g],d)})),s.addEventListener("touchmove",(function(e){e.preventDefault();for(var t=0;t<e.touches.length;t++){var r=e.touches[t];u.stepCircle(h,[r.pageX,s.clientHeight-r.pageY],10,[g],d)}})),document.addEventListener("gesturestart",m),document.addEventListener("gesturechange",m),document.addEventListener("gestureend",m),window.requestAnimationFrame((function e(){u.step(l,[d],d),u.step(f,[d]),window.requestAnimationFrame(e)}))},645:e=>{e.exports="precision lowp float;\n\nvarying vec2 vUV;\nuniform sampler2D u_state;\nuniform vec2 u_pxSize;\n\nvoid main() {\n\tfloat currentState = texture2D(u_state, vUV).r;\n\n\tint count = 0;\n\tfor (int i = -1; i < 2; i++) {\n\t\tfor (int j =- 1; j < 2; j++) {\n\t\t\tif (i == 0 && j == 0) continue;\n\t\t\tvec2 neighborUV = vUV + vec2(u_pxSize.x * float(i), u_pxSize.y * float(j));\n\t\t\tif (texture2D(u_state, neighborUV).r == 1.0) count++;\n\t\t}\n\t}\n\n\t// https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules\n\tif (count == 3 || (currentState == 1.0 && count == 2)) {\n\t\tgl_FragColor = vec4(1);\n\t\treturn;\n\t}\n\tgl_FragColor = vec4(0, 0, 0,1);\n}"},950:e=>{e.exports="precision lowp float;\n\nvarying vec2 vUV_local;\nuniform sampler2D u_noiseLookup;\n\nvoid main() {\n\tfloat state = texture2D(u_noiseLookup, vUV_local).r;\n\tgl_FragColor = vec4(state, 0, 0, 1);\n}\n"},539:e=>{e.exports="precision lowp float;\n\nvarying vec2 vUV;\nuniform sampler2D u_state;\n\nvoid main() {\n\tfloat currentState = texture2D(u_state, vUV).r;\n\tgl_FragColor = vec4(currentState, currentState, currentState, 1);\n}"}},t={};!function r(n){if(t[n])return t[n].exports;var a=t[n]={exports:{}};return e[n](a,a.exports,r),a.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,