(()=>{var e={607:(e,t,r)=>{"use strict";var n=r(561),o=r(645),a=r(539),i=r(950),s=document.getElementById("glcanvas"),u=new n.GPGPU(null,s);u.initProgram("gol",o,[{name:"u_state",value:0,dataType:"INT"},{name:"u_pxSize",value:[1/s.clientWidth,1/s.clientHeight],dataType:"FLOAT"}]),u.initProgram("render",a,[{name:"u_state",value:0,dataType:"INT"}]),u.initProgram("interaction",i,[{name:"u_noiseLookup",value:0,dataType:"INT"}]);function l(e){e.preventDefault();var t="scale(1)";document.body.style.webkitTransform=t,document.body.style.msTransform=t,document.body.style.transform=t}function f(e,t){void 0===t&&(t=.1);for(var r=new Uint8Array(e),n=0,o=r.length;n<o;n++)r[n]=Math.random()<t?255:0;return r}function c(){var e=s.clientWidth,t=s.clientHeight,r=f(e*t);u.initTexture("currentState",e,t,"uint8",1,!0,void 0,!0),u.initTexture("lastState",e,t,"uint8",1,!0,r,!0),u.setProgramUniform("gol","u_pxSize",[1/e,1/t],"FLOAT"),u.onResize(s)}u.initTexture("noiseLookup",20,20,"uint8",1,!1,f(400,.5)),window.onmousemove=function(e){u.stepCircle("interaction",[e.clientX,e.clientY],10,["noiseLookup"],"lastState")},window.ontouchmove=function(e){e.preventDefault();for(var t=0;t<e.touches.length;t++){var r=e.touches[t];u.stepCircle("interaction",[r.pageX,r.pageY],10,["noiseLookup"],"lastState")}},document.addEventListener("gesturestart",l),document.addEventListener("gesturechange",l),document.addEventListener("gestureend",l),window.addEventListener("resize",c),c(),window.requestAnimationFrame((function e(){u.step("gol",["lastState"],"currentState"),u.step("render",["currentState"]),u.swapTextures("currentState","lastState"),window.requestAnimationFrame(e)}))},576:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPGPU=void 0;for(var n=r(416),o=r(647),a=new Float32Array([-1,-1,1,-1,-1,1,1,1]),i=new Float32Array([-1,-1,1,-1,1,1,-1,1]),s=[0,0],u=0;u<=20;u++)s.push(Math.cos(2*Math.PI*u/20),Math.sin(2*Math.PI*u/20));var l=new Float32Array(s),f=function(){function e(e,t,r){void 0===r&&(r=function(e){throw new Error(e)}),this.extensions={},this.errorState=!1,this.programs={},this.textures={},this.framebuffers={},this.shaders=[];var o=this;if(this.errorCallback=function(e){o.errorState=!0,r&&r(e)},e||null!==(e=t.getContext("webgl2",{antialias:!1})||t.getContext("webgl",{antialias:!1}))){this.isWebGL2=!!e.HALF_FLOAT,this.isWebGL2?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=e,this.isWebGL2?this.loadExtension("EXT_color_buffer_float"):this.loadExtension("OES_texture_half_float"),this.linearFilterEnabled=this.loadExtension("OES_texture_half_float_linear",!0),e.disable(e.DEPTH_TEST),e.pixelStorei(e.UNPACK_ALIGNMENT,1);var s=this.compileShader(n.default,e.VERTEX_SHADER);if(s){this.defaultVertexShader=s,this.quadPositionsBuffer=this.initVertexBuffer(a),this.boundaryPositionsBuffer=this.initVertexBuffer(i),this.circlePositionsBuffer=this.initVertexBuffer(l),e.bindBuffer(e.ARRAY_BUFFER,null),this.onResize(t);var u=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);console.log(u+" textures max.")}else r("Unable to initialize fullscreen quad vertex shader.")}else r("Unable to initialize WebGL context.")}return e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),n;t("Unable to allocate gl buffer.")},e.prototype.loadExtension=function(e,t){void 0===t&&(t=!1);var r,n=this,o=n.extensions,a=n.gl,i=n.errorCallback;try{r=a.getExtension(e)}catch(e){}return r?(o[e]=r,console.log("Loaded extension: "+e+".")):console.warn("Unsupported "+(t?"optional ":"")+"extension: "+e+"."),r||t||i("Required extension unsupported by this device / browser: "+e+"."),!!r},e.prototype.compileShader=function(e,t){var r=this,n=r.gl,o=r.errorCallback,a=r.shaders,i=n.createShader(t);return i?(n.shaderSource(i,e),n.compileShader(i),n.getShaderParameter(i,n.COMPILE_STATUS)?(a.push(i),i):(o("Could not compile "+(t===n.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t\t shader: "+n.getShaderInfoLog(i)),null)):(o("Unable to init gl shader."),null)},e.prototype.initProgram=function(e,t,r){var n=this,o=this,a=o.programs,i=o.gl,s=o.errorCallback;if(a[e])return i.useProgram(a[e].program),void console.warn("Already a program with the name "+e+".");var u=this.compileShader(t,i.FRAGMENT_SHADER),l=this.defaultVertexShader;if(u&&l){var f=i.createProgram();f?(i.attachShader(f,l),i.attachShader(f,u),i.linkProgram(f),i.getProgramParameter(f,i.LINK_STATUS)||s("Program "+e+" filed to link: "+i.getProgramInfoLog(f)),a[e]={program:f,uniforms:{}},null==r||r.forEach((function(t){var r=t.name,o=t.value,a=t.dataType;n.setProgramUniform(e,r,o,a)}))):s("Unable to init gl program.")}else s("Unable to init shaders for program "+e+".")},e.prototype.uniformTypeForValue=function(e,t){if(t===o.FLOAT_TYPE){if(!isNaN(e)||1===e.length)return o.FLOAT_1D_UNIFORM;if(2===e.length)return o.FLOAT_2D_UNIFORM;if(3===e.length)return o.FLOAT_3D_UNIFORM;if(4===e.length)return o.FLOAT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}if(t===o.INT_TYPE){if(!isNaN(e)||1===e.length)return o.INT_1D_UNIFORM;if(2===e.length)return o.INT_2D_UNIFORM;if(3===e.length)return o.INT_3D_UNIFORM;if(4===e.length)return o.INT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}throw new Error("Invalid uniform data type: "+t)},e.prototype.setProgramUniform=function(e,t,r,n){var a=this,i=a.gl,s=a.programs,u=a.errorCallback,l=s[e];if(!l)throw new Error("Count not set uniform, no program of name: "+e+".");i.useProgram(l.program);var f=l.uniforms,c=this.uniformTypeForValue(r,n);if(!f[t]){var h=i.getUniformLocation(l.program,t);if(!h)return void u("Could not init uniform "+t+" for program "+e+".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type "+c+".\nError code: "+i.getError()+".");f[t]={location:h,type:c}}var d=f[t];if(d.type!=c)throw new Error("Uniform "+t+" cannot change from type "+d.type+" to type "+c+".");var _=d.location;switch(c){case o.FLOAT_1D_UNIFORM:i.uniform1f(_,r);break;case o.FLOAT_2D_UNIFORM:i.uniform2fv(_,r);break;case o.FLOAT_3D_UNIFORM:i.uniform3fv(_,r);break;case o.FLOAT_4D_UNIFORM:i.uniform4fv(_,r);break;case o.INT_1D_UNIFORM:i.uniform1i(_,r);break;case o.INT_2D_UNIFORM:i.uniform2iv(_,r);break;case o.INT_3D_UNIFORM:i.uniform3iv(_,r);break;case o.INT_4D_UNIFORM:i.uniform4iv(_,r);break;default:throw new Error("Unknown uniform type: "+c+".")}},e.prototype.initFramebufferForTexture=function(e,t){void 0===t&&(t=!1);var r=this,n=r.gl,o=r.framebuffers,a=r.textures,i=r.errorCallback;o[e]&&(t||console.warn("Already a framebuffer with the name "+e+", use shouldOverwrite flag in initTexture() to ignore."),n.deleteFramebuffer(o[e]));var s=a[e];if(!s)throw new Error("Cannot init framebuffer, texture "+e+" does not exist.");var u=n.createFramebuffer();if(u){n.bindFramebuffer(n.FRAMEBUFFER,u),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);var l=n.checkFramebufferStatus(n.FRAMEBUFFER);l!=n.FRAMEBUFFER_COMPLETE&&i("Invalid status for "+e+" framebuffer: "+l+"."),o[e]=u}else i("Could not init "+e+" framebuffer: "+n.getError()+".")},e.prototype.glTextureParameters=function(e,t,r){var n,o,a,i,s=this,u=s.gl,l=s.isWebGL2,f=s.extensions;if(l){switch(i=e,3===e&&r&&(i=4),i){case 1:o=u.RED;break;case 2:o=u.RG;break;case 3:o=u.RGB;break;case 4:o=u.RGBA}switch(t){case"float16":switch(n=u.HALF_FLOAT,i){case 1:a=u.R16F;break;case 2:a=u.RG16F;break;case 3:a=u.RGB16F;break;case 4:a=u.RGBA16F}break;case"uint8":switch(n=u.UNSIGNED_BYTE,i){case 1:a=u.R8;break;case 2:a=u.RG8;break;case 3:a=u.RGB8;break;case 4:a=u.RGBA8}}}else{switch(e){case 1:case 2:case 3:o=u.RGB,a=u.RGB,i=3;break;case 4:o=u.RGBA,a=u.RGBA,i=4}switch(t){case"float16":n=f.OES_texture_half_float.HALF_FLOAT_OES;break;case"uint8":n=u.UNSIGNED_BYTE}}if(void 0===n||void 0===o||void 0===a)throw new Error("Invalid type: "+t+" or numChannels "+e+".");if(void 0===i||e<1||e>4)throw new Error("Invalid numChannels: "+e+".");return{glFormat:o,glInternalFormat:a,glType:n,glNumChannels:i}},e.prototype.initTexture=function(e,t,r,n,o,a,i,s){void 0===a&&(a=!1),void 0===s&&(s=!1);var u=this,l=u.gl,f=u.textures,c=u.framebuffers,h=u.errorCallback;if(f[e]&&(s||console.warn("Already a texture with the name "+e+", use shouldOverwrite flag to ignore."),l.deleteTexture(f[e])),i&&i.length!==t*r*o)throw new Error("Invalid data array of size "+i.length+" for texture of dimensions "+t+" x "+r+" x "+o+".");var d=l.createTexture();if(d){l.bindTexture(l.TEXTURE_2D,d),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE);var _=l.NEAREST;l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,_),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,_);var m=this.glTextureParameters(o,n,a),v=m.glFormat,g=m.glInternalFormat,p=m.glNumChannels,T=m.glType;if(i&&o!==p){var F=t*r,E=void 0;switch(n){case"uint8":E=new Uint8Array(t*r*p);break;default:throw new Error("Unsupported type "+n+" for initTexture.")}for(var R=0;R<F;R++)for(var b=0;b<o;b++)E[p*R+b]=i[R*o+b];i=E}l.texImage2D(l.TEXTURE_2D,0,g,t,r,0,v,T,i||null),f[e]=d,a?this.initFramebufferForTexture(e,s):s&&c[e]&&(l.deleteFramebuffer(c[e]),delete c[e])}else h("Could not init "+e+" texture: "+l.getError()+".")},e.prototype.onResize=function(e){var t=this.gl,r=e.clientWidth,n=e.clientHeight;t.viewport(0,0,r,n),e.width=r,e.height=n,this.width=r,this.height=n},e.prototype._step=function(e,t,r){var n=this,o=n.gl,a=n.programs,i=n.framebuffers,s=a[e];if(!s)throw new Error("Invalid program name: "+e+".");o.useProgram(s.program);var u=r?i[r]:null;if(void 0===u)throw new Error("Invalid output texture: "+r+".");o.bindFramebuffer(o.FRAMEBUFFER,u);for(var l=0;l<t.length;l++)o.activeTexture(o.TEXTURE0+l),o.bindTexture(o.TEXTURE_2D,this.textures[t[l]]);var f=o.getAttribLocation(s.program,"aPosition");o.vertexAttribPointer(f,2,o.FLOAT,!1,0,0),o.enableVertexAttribArray(f)},e.prototype.step=function(e,t,r){void 0===t&&(t=[]);var n=this,o=n.gl,a=n.errorState,i=n.quadPositionsBuffer;a||(this.setProgramUniform(e,"u_scale",[1,1],"FLOAT"),this.setProgramUniform(e,"u_translation",[0,0],"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,i),this._step(e,t,r),o.drawArrays(o.TRIANGLE_STRIP,0,4))},e.prototype.stepBoundary=function(e,t,r){void 0===t&&(t=[]);var n=this,o=n.gl,a=n.errorState,i=n.boundaryPositionsBuffer,s=n.width,u=n.height;if(!a){var l=[1/s,1/u];this.setProgramUniform(e,"u_scale",[1-l[0],1-l[1]],"FLOAT"),this.setProgramUniform(e,"u_translation",l,"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,i),this._step(e,t,r),o.drawArrays(o.LINE_LOOP,0,4)}},e.prototype.stepNonBoundary=function(e,t,r){void 0===t&&(t=[]);var n=this,o=n.gl,a=n.errorState,i=n.quadPositionsBuffer,s=n.width,u=n.height;if(!a){var l=[1/s,1/u];this.setProgramUniform(e,"u_scale",[1-2*l[0],1-2*l[1]],"FLOAT"),this.setProgramUniform(e,"u_translation",l,"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,i),this._step(e,t,r),o.drawArrays(o.TRIANGLE_STRIP,0,4)}},e.prototype.stepCircle=function(e,t,r,n,o){void 0===n&&(n=[]);var a=this,i=a.gl,s=a.errorState,u=a.circlePositionsBuffer,l=a.width,f=a.height;s||(this.setProgramUniform(e,"u_scale",[r/l,r/f],"FLOAT"),this.setProgramUniform(e,"u_translation",[2*t[0]/l-1,-2*t[1]/f+1],"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,u),this._step(e,n,o),i.drawArrays(i.TRIANGLE_FAN,0,22))},e.prototype.swapTextures=function(e,t){var r=this.textures,n=this.framebuffers,o=r[e];r[e]=this.textures[t],r[t]=o,o=n[e],n[e]=this.framebuffers[t],n[t]=o},e.prototype.reset=function(){var e=this,t=e.gl,r=e.programs,n=e.framebuffers,o=e.textures,a=e.shaders,i=e.defaultVertexShader;Object.keys(r).forEach((function(e){var n=r[e].program;t.deleteProgram(n),delete r[e]})),Object.keys(n).forEach((function(e){var r=n[e];t.deleteFramebuffer(r),delete n[e]})),Object.keys(o).forEach((function(e){var r=o[e];t.deleteTexture(r),delete o[e]}));for(var s=a.length-1;s>=0;s--)a[s]!==i&&(t.deleteShader(a[s]),a.splice(s,1))},e}();t.GPGPU=f},647:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.INT_TYPE=t.FLOAT_TYPE=t.INT_4D_UNIFORM=t.INT_3D_UNIFORM=t.INT_2D_UNIFORM=t.INT_1D_UNIFORM=t.FLOAT_4D_UNIFORM=t.FLOAT_3D_UNIFORM=t.FLOAT_2D_UNIFORM=t.FLOAT_1D_UNIFORM=void 0,t.FLOAT_1D_UNIFORM="1f",t.FLOAT_2D_UNIFORM="2f",t.FLOAT_3D_UNIFORM="3f",t.FLOAT_4D_UNIFORM="3f",t.INT_1D_UNIFORM="1i",t.INT_2D_UNIFORM="2i",t.INT_3D_UNIFORM="3i",t.INT_4D_UNIFORM="3i",t.FLOAT_TYPE="FLOAT",t.INT_TYPE="INT"},561:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SingleColorFragShader=t.GPGPU=void 0;var n=r(576);Object.defineProperty(t,"GPGPU",{enumerable:!0,get:function(){return n.GPGPU}});var o=r(929);t.SingleColorFragShader=o.default},416:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\nattribute vec2 aPosition;\nuniform vec2 u_scale;\nuniform vec2 u_translation;\nvarying vec2 uv_local;\nvarying vec2 uv;\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tuv_local = 0.5 * (aPosition + 1.0);\n\t// Apply transformations.\n\tvec2 position = u_scale * aPosition + u_translation;\n\t// Calculate a global uv for the viewport.\n\tuv = 0.5 * (position + 1.0);\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}\n"},929:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\nuniform vec3 u_color;\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},645:e=>{e.exports="precision lowp float;\n\nvarying vec2 uv;\nuniform sampler2D u_state;\nuniform vec2 u_pxSize;\n\nvoid main() {\n\tfloat currentState = texture2D(u_state, uv).r;\n\n\tint count = 0;\n\tfor (int i = -1; i < 2; i++) {\n\t\tfor (int j =- 1; j < 2; j++) {\n\t\t\tif (i == 0 && j == 0) continue;\n\t\t\tvec2 neighborUV = uv + vec2(u_pxSize.x * float(i), u_pxSize.y * float(j));\n\t\t\tif (texture2D(u_state, neighborUV).r == 1.0) count++;\n\t\t}\n\t}\n\n\t// https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life#Rules\n\tif (count == 3 || (currentState == 1.0 && count == 2)) {\n\t\tgl_FragColor = vec4(1);\n\t\treturn;\n\t}\n\tgl_FragColor = vec4(0, 0, 0,1);\n}"},950:e=>{e.exports="precision lowp float;\n\nvarying vec2 uv_local;\nuniform sampler2D u_noiseLookup;\n\nvoid main() {\n\tfloat state = texture2D(u_noiseLookup, uv_local).r;\n\tgl_FragColor = vec4(state, 0, 0, 1);\n}\n"},539:e=>{e.exports="precision lowp float;\n\nvarying vec2 uv;\nuniform sampler2D u_state;\n\nvoid main() {\n\tfloat currentState = texture2D(u_state, uv).r;\n\tgl_FragColor = vec4(currentState, currentState, currentState, 1);\n}"}},t={};!function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return e[n](o,o.exports,r),o.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,